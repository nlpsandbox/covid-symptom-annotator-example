# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.text_annotation import TextAnnotation
from openapi_server.models.text_covid_symptom_annotation_all_of import TextCovidSymptomAnnotationAllOf
from openapi_server import util

from openapi_server.models.text_annotation import TextAnnotation  # noqa: E501
from openapi_server.models.text_covid_symptom_annotation_all_of import TextCovidSymptomAnnotationAllOf  # noqa: E501

class TextCovidSymptomAnnotation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, start=None, length=None, text=None, confidence=None, condition=None, certainty=None):  # noqa: E501
        """TextCovidSymptomAnnotation - a model defined in OpenAPI

        :param start: The start of this TextCovidSymptomAnnotation.  # noqa: E501
        :type start: int
        :param length: The length of this TextCovidSymptomAnnotation.  # noqa: E501
        :type length: int
        :param text: The text of this TextCovidSymptomAnnotation.  # noqa: E501
        :type text: str
        :param confidence: The confidence of this TextCovidSymptomAnnotation.  # noqa: E501
        :type confidence: float
        :param condition: The condition of this TextCovidSymptomAnnotation.  # noqa: E501
        :type condition: str
        :param certainty: The certainty of this TextCovidSymptomAnnotation.  # noqa: E501
        :type certainty: str
        """
        self.openapi_types = {
            'start': int,
            'length': int,
            'text': str,
            'confidence': float,
            'condition': str,
            'certainty': str
        }

        self.attribute_map = {
            'start': 'start',
            'length': 'length',
            'text': 'text',
            'confidence': 'confidence',
            'condition': 'condition',
            'certainty': 'certainty'
        }

        self._start = start
        self._length = length
        self._text = text
        self._confidence = confidence
        self._condition = condition
        self._certainty = certainty

    @classmethod
    def from_dict(cls, dikt) -> 'TextCovidSymptomAnnotation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TextCovidSymptomAnnotation of this TextCovidSymptomAnnotation.  # noqa: E501
        :rtype: TextCovidSymptomAnnotation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def start(self):
        """Gets the start of this TextCovidSymptomAnnotation.

        The position of the first character  # noqa: E501

        :return: The start of this TextCovidSymptomAnnotation.
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this TextCovidSymptomAnnotation.

        The position of the first character  # noqa: E501

        :param start: The start of this TextCovidSymptomAnnotation.
        :type start: int
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")  # noqa: E501

        self._start = start

    @property
    def length(self):
        """Gets the length of this TextCovidSymptomAnnotation.

        The length of the annotation  # noqa: E501

        :return: The length of this TextCovidSymptomAnnotation.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this TextCovidSymptomAnnotation.

        The length of the annotation  # noqa: E501

        :param length: The length of this TextCovidSymptomAnnotation.
        :type length: int
        """
        if length is None:
            raise ValueError("Invalid value for `length`, must not be `None`")  # noqa: E501

        self._length = length

    @property
    def text(self):
        """Gets the text of this TextCovidSymptomAnnotation.

        The string annotated  # noqa: E501

        :return: The text of this TextCovidSymptomAnnotation.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this TextCovidSymptomAnnotation.

        The string annotated  # noqa: E501

        :param text: The text of this TextCovidSymptomAnnotation.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def confidence(self):
        """Gets the confidence of this TextCovidSymptomAnnotation.

        The confidence in the accuracy of the annotation  # noqa: E501

        :return: The confidence of this TextCovidSymptomAnnotation.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this TextCovidSymptomAnnotation.

        The confidence in the accuracy of the annotation  # noqa: E501

        :param confidence: The confidence of this TextCovidSymptomAnnotation.
        :type confidence: float
        """
        if confidence is None:
            raise ValueError("Invalid value for `confidence`, must not be `None`")  # noqa: E501
        if confidence is not None and confidence > 100:  # noqa: E501
            raise ValueError("Invalid value for `confidence`, must be a value less than or equal to `100`")  # noqa: E501
        if confidence is not None and confidence < 0:  # noqa: E501
            raise ValueError("Invalid value for `confidence`, must be a value greater than or equal to `0`")  # noqa: E501

        self._confidence = confidence

    @property
    def condition(self):
        """Gets the condition of this TextCovidSymptomAnnotation.

        The sign/symptom type according to CDC definition   # noqa: E501

        :return: The condition of this TextCovidSymptomAnnotation.
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this TextCovidSymptomAnnotation.

        The sign/symptom type according to CDC definition   # noqa: E501

        :param condition: The condition of this TextCovidSymptomAnnotation.
        :type condition: str
        """
        allowed_values = ["fever", "chill", "cough", "fatigue", "nasal_obstruction", "loss_of_appetite", "diarrhea", "abdominal_pain", "nausea", "vomiting", "sore_throat", "headache", "myalgia", "loss_of_taste", "loss_of_smell", "dyspnea", "chest_pain", "delirium", "hypersomnia", "cyanosis"]  # noqa: E501
        if condition not in allowed_values:
            raise ValueError(
                "Invalid value for `condition` ({0}), must be one of {1}"
                .format(condition, allowed_values)
            )

        self._condition = condition

    @property
    def certainty(self):
        """Gets the certainty of this TextCovidSymptomAnnotation.

        Whether the annotation is positively or negatively correlated with the presence of COVID   # noqa: E501

        :return: The certainty of this TextCovidSymptomAnnotation.
        :rtype: str
        """
        return self._certainty

    @certainty.setter
    def certainty(self, certainty):
        """Sets the certainty of this TextCovidSymptomAnnotation.

        Whether the annotation is positively or negatively correlated with the presence of COVID   # noqa: E501

        :param certainty: The certainty of this TextCovidSymptomAnnotation.
        :type certainty: str
        """
        allowed_values = ["positive", "negated", "possible"]  # noqa: E501
        if certainty not in allowed_values:
            raise ValueError(
                "Invalid value for `certainty` ({0}), must be one of {1}"
                .format(certainty, allowed_values)
            )

        self._certainty = certainty
